plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

//loom {
//    runs {
//        datagenClient {
//            client()
//            name "Data Generation Client"
//            vmArg "-Dfabric-api.datagen"
//            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
//            vmArg "-Dfabric-api.datagen.modid=sonance"
//
//            ideConfigGenerated = true
//            runDir "build/datagen"
//        }
//    }
//}
//
//sourceSets {
//    main {
//        resources {
//            srcDirs += [
//                    'src/main/generated'
//            ]
//        }
//    }
//}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
    modLocalRuntime modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}")

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0")))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
